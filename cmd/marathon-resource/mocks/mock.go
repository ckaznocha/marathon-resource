// Automatically generated by MockGen. DO NOT EDIT!
// Source: marathon/marathon.go

package mocks

import (
	go_marathon "github.com/gambol99/go-marathon"
	gomock "github.com/golang/mock/gomock"
	http "net/http"
)

// Mock of doer interface
type Mockdoer struct {
	ctrl     *gomock.Controller
	recorder *_MockdoerRecorder
}

// Recorder for Mockdoer (not exported)
type _MockdoerRecorder struct {
	mock *Mockdoer
}

func NewMockdoer(ctrl *gomock.Controller) *Mockdoer {
	mock := &Mockdoer{ctrl: ctrl}
	mock.recorder = &_MockdoerRecorder{mock}
	return mock
}

func (_m *Mockdoer) EXPECT() *_MockdoerRecorder {
	return _m.recorder
}

func (_m *Mockdoer) Do(req *http.Request) (*http.Response, error) {
	ret := _m.ctrl.Call(_m, "Do", req)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockdoerRecorder) Do(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Do", arg0)
}

// Mock of Marathoner interface
type MockMarathoner struct {
	ctrl     *gomock.Controller
	recorder *_MockMarathonerRecorder
}

// Recorder for MockMarathoner (not exported)
type _MockMarathonerRecorder struct {
	mock *MockMarathoner
}

func NewMockMarathoner(ctrl *gomock.Controller) *MockMarathoner {
	mock := &MockMarathoner{ctrl: ctrl}
	mock.recorder = &_MockMarathonerRecorder{mock}
	return mock
}

func (_m *MockMarathoner) EXPECT() *_MockMarathonerRecorder {
	return _m.recorder
}

func (_m *MockMarathoner) LatestVersions(appID string, version string) ([]string, error) {
	ret := _m.ctrl.Call(_m, "LatestVersions", appID, version)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockMarathonerRecorder) LatestVersions(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "LatestVersions", arg0, arg1)
}

func (_m *MockMarathoner) GetApp(appID string, version string) (go_marathon.Application, error) {
	ret := _m.ctrl.Call(_m, "GetApp", appID, version)
	ret0, _ := ret[0].(go_marathon.Application)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockMarathonerRecorder) GetApp(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetApp", arg0, arg1)
}

func (_m *MockMarathoner) UpdateApp(_param0 go_marathon.Application) (go_marathon.DeploymentID, error) {
	ret := _m.ctrl.Call(_m, "UpdateApp", _param0)
	ret0, _ := ret[0].(go_marathon.DeploymentID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockMarathonerRecorder) UpdateApp(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateApp", arg0)
}

func (_m *MockMarathoner) RestartApp(appID string) (go_marathon.DeploymentID, error) {
	ret := _m.ctrl.Call(_m, "RestartApp", appID)
	ret0, _ := ret[0].(go_marathon.DeploymentID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockMarathonerRecorder) RestartApp(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RestartApp", arg0)
}

func (_m *MockMarathoner) CheckDeployment(deploymentID string) (bool, error) {
	ret := _m.ctrl.Call(_m, "CheckDeployment", deploymentID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockMarathonerRecorder) CheckDeployment(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CheckDeployment", arg0)
}

func (_m *MockMarathoner) DeleteDeployment(deploymentID string) error {
	ret := _m.ctrl.Call(_m, "DeleteDeployment", deploymentID)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockMarathonerRecorder) DeleteDeployment(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteDeployment", arg0)
}
